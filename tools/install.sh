#!/usr/bin/env bash
set -Eeuo pipefail

# === System paths (we don't modify repo structure here) ===
CFG_DIR="${HOME}/printer_data/config"
PRINTER_CFG="${CFG_DIR}/printer.cfg"
BUILDER_CFG="${CFG_DIR}/builder.cfg"
BUILDER_MACROS="${CFG_DIR}/builder_macros.cfg"

echo "== macro-builder installer =="

# -------------------------------------------------
# 1) PRE-CHECKS: gcode_shell_command + Katapult
# -------------------------------------------------

# 1.a) gcode_shell_command (Klipper extra)
if [[ ! -f "${HOME}/klipper/klippy/extras/gcode_shell_command.py" ]]; then
  echo "ERROR: Klipper does not have 'gcode_shell_command'."
  echo "-> Update Klipper via Mainsail (Machine > Updates) or KIAUH, then retry."
  exit 1
fi

# 1.b) Katapult present with flashing scripts
KATA_DIR="${HOME}/katapult"
if [[ ! -d "${KATA_DIR}" ]] \
   || [[ ! -f "${KATA_DIR}/scripts/flash_can.py" ]] \
   || [[ ! -f "${KATA_DIR}/scripts/flashtool.py" ]]; then
  echo "ERROR: Katapult is not installed correctly."
  echo "-> Install with:"
  echo "     git clone https://github.com/Arksine/katapult.git ~/katapult"
  echo "   Make sure these exist:"
  echo "     ~/katapult/scripts/flash_can.py"
  echo "     ~/katapult/scripts/flashtool.py"
  exit 1
fi

echo "[1/6] OK: gcode_shell_command and Katapult detected."

mkdir -p "${CFG_DIR}"

# -------------------------------------------------
# 4) Create builder_macros.cfg (EN) and include it in printer.cfg
# -------------------------------------------------
cat > "${BUILDER_MACROS}" <<'EOF'
# ===============================
# macro-builder: builder_macros.cfg
# ===============================
# Include this file at the TOP of your printer.cfg:
#     [include builder_macros.cfg]
#
# What you get:
# - Two visible macros to RUN the builders and SHOW the summaries:
#     * BUILDER_KLIPPER_BUILD / BUILDER_KLIPPER_SHOW
#     * BUILDER_KATAPULT_BUILD / BUILDER_KATAPULT_SHOW
# - Two shell backends to actually flash via CAN/USB:
#     * FLASH_CAN  (gcode_shell_command)    ← not shown as a button
#     * FLASH_USB  (gcode_shell_command)    ← not shown as a button
#
# The builders will print suggested commands either as:
#   - SSH commands, or
#   - RUN_SHELL_COMMAND lines using the backends above (if you set "flash terminal: gcode_shell")

# --- Flash backends (hidden from UI: they are gcode_shell_command) ---
[gcode_shell_command FLASH_CAN]
command: bash -lc 'python3 ${HOME}/katapult/scripts/flash_can.py {params}'
timeout: 180
verbose: True

[gcode_shell_command FLASH_USB]
command: bash -lc 'python3 ${HOME}/katapult/scripts/flashtool.py {params}'
timeout: 180
verbose: True

# --- Builder: KLIPPER ---
[gcode_shell_command BUILDER_KLIPPER_RUN]
# Launch the Klipper firmware builder (reads ~/printer_data/config/builder.cfg)
command: bash -lc '${HOME}/macro-builder/build_klipper.sh'
timeout: 6000
verbose: True

[gcode_macro BUILDER_KLIPPER_BUILD]
description: Build Klipper firmwares from builder.cfg and print suggested flash commands
gcode:
  RUN_SHELL_COMMAND CMD=BUILDER_KLIPPER_RUN

[gcode_shell_command BUILDER_KLIPPER_SHOW]
# Show the latest builder summary produced by build_klipper.sh
command: bash -lc 'test -f ${HOME}/printer_data/system/builder_klipper_last.txt && cat ${HOME}/printer_data/system/builder_klipper_last.txt || echo "No Klipper builder summary yet."'
timeout: 15
verbose: True

[gcode_macro BUILDER_KLIPPER_SHOW]
description: Show last Klipper builder summary
gcode:
  RUN_SHELL_COMMAND CMD=BUILDER_KLIPPER_SHOW

# --- Builder: KATAPULT ---
[gcode_shell_command BUILDER_KATAPULT_RUN]
# Launch the Katapult bootloader builder (reads ~/printer_data/config/builder.cfg)
command: bash -lc '${HOME}/macro-builder/build_katapult.sh'
timeout: 6000
verbose: True

[gcode_macro BUILDER_KATAPULT_BUILD]
description: Build Katapult bootloaders from builder.cfg and print suggested flash commands
gcode:
  RUN_SHELL_COMMAND CMD=BUILDER_KATAPULT_RUN

[gcode_shell_command BUILDER_KATAPULT_SHOW]
# Show the latest builder summary produced by build_katapult.sh
command: bash -lc 'test -f ${HOME}/printer_data/system/builder_katapult_last.txt && cat ${HOME}/printer_data/system/builder_katapult_last.txt || echo "No Katapult builder summary yet."'
timeout: 15
verbose: True

[gcode_macro BUILDER_KATAPULT_SHOW]
description: Show last Katapult builder summary
gcode:
  RUN_SHELL_COMMAND CMD=BUILDER_KATAPULT_SHOW
EOF

# Auto-include at the top of printer.cfg
if [[ ! -f "${PRINTER_CFG}" ]]; then
  echo "# Autogenerated printer.cfg header" > "${PRINTER_CFG}"
fi
if ! grep -qE '^\s*\[include\s+builder_macros\.cfg\]\s*$' "${PRINTER_CFG}"; then
  cp -f "${PRINTER_CFG}" "${PRINTER_CFG}.bak.$(date +%s)"
  printf "[include builder_macros.cfg]\n\n%s" "$(cat "${PRINTER_CFG}")" > "${PRINTER_CFG}"
  echo "[4/6] Added [include builder_macros.cfg] at the top of ${PRINTER_CFG} (backup created)."
else
  echo "[4/6] printer.cfg already includes builder_macros.cfg."
fi
echo "[4/6] builder_macros.cfg created at ${BUILDER_MACROS}"

# -------------------------------------------------
# 3) + 5) Create builder.cfg (EN) with examples
# -------------------------------------------------
cp -f "${BUILDER_CFG}" "${BUILDER_CFG}.bak.$(date +%s)" 2>/dev/null || true
cat > "${BUILDER_CFG}" <<'EOF'
# =========================
# macro-builder: builder.cfg
# =========================
# This single config drives BOTH builders:
#   - [klipper <NAME>] sections build Klipper firmwares
#   - [katapult <NAME>] sections build Katapult bootloaders
#
# Fields (per section):
#   name:              Friendly name for the artifact/versioned file names.
#   config:            Either a bare filename searched under:
#                        ~/macro-builder/configs/klipper/   (for [klipper ...])
#                        ~/macro-builder/configs/katapult/  (for [katapult ...])
#                      or any path (absolute, or relative to the macro-builder root).
#   out:               Output filename (the fixed link stored in artifacts folder).
#   type:              can | usb | sd
#   mcu_alias, mcu_alias1, ... :
#                      One or more aliases matching [mcu <alias>] sections in printer.cfg.
#                      Use 'main' to refer to the base [mcu] section (no alias).
#   flash terminal:    ssh | gcode_shell
#                      How to print the suggested flashing commands (N/A for sd).
#
# Notes:
# - CAN sections will print 'flash_can.py' suggestions (or RUN_SHELL_COMMAND via gcode).
# - USB sections will print 'flashtool.py' suggestions (or RUN_SHELL_COMMAND via gcode).
# - SD sections print manual steps (copy to microSD root and power-cycle).
#
# ------- EXAMPLE: KLIPPER over CAN (EBB36 toolheads) -------
[klipper EBB36]
name: EBB36
config: ebb36_can.config
out: ebb.bin
type: can
mcu_alias: ebb1
mcu_alias1: ebb2
flash terminal: gcode_shell

# ------- EXAMPLE: KLIPPER via SD (Main board) -------
[klipper MAIN]
name: MAIN
config: main_mcu.config
out: mks_monster8.bin
type: sd
mcu_alias: main
# flash terminal: (not applicable to sd)

# ------- EXAMPLE: KATAPULT over CAN (EBB36 bootloader) -------
[katapult EBB36]
name: EBB36
config: ebb36_can.config
out: ebb.bin
type: can
mcu_alias: ebb1
mcu_alias1: ebb2
flash terminal: ssh
EOF
echo "[5/6] builder.cfg created at ${BUILDER_CFG} (backup saved if existed)."

# -------------------------------------------------
# 6) Hide non-user macros (buttons)
# -------------------------------------------------
# In Mainsail, ONLY 'gcode_macro' blocks become buttons.
# FLASH_CAN / FLASH_USB are 'gcode_shell_command', so they do not show as buttons.
echo "[6/6] Flash backends are gcode_shell_command (not shown as buttons)."

echo
echo "=== Done ==="
echo "• builder_macros.cfg: ${BUILDER_MACROS} (already included in printer.cfg)"
echo "• builder.cfg:        ${BUILDER_CFG} (edit to suit your setup)"
echo "• Restart Klipper after installation:"
echo "    sudo systemctl restart klipper"
